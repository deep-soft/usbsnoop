# 2024-02-04 13:20
# 
name: act-release

on: 
  workflow_dispatch:
    inputs:
      patch_CMakeLists_txt:
        description: patch CMakeLists.txt
        type: boolean
        default: false
        required: true
      CreateZipAll:
        description: CreateZipAll
        type: boolean
        default: false
        required: true
#  push:
#  pull_request: 
#  schedule: 
#    - cron: '0 0 1 * *'

env:
  PROG_NAME: "usbsnoop"
  PROG_VER:  "v0.26.2"
  TAG_NAME:  "usbsnoop"
  TAG_VER:   "v0.26.2"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [
                 msbuild_cl_x64_release,
                 msbuild_cl_x64_minsize,
               ]
        include:
          - { build: msbuild_cl_x64_release,  os: windows-2019,  compiler: msbuild_cl, arch: amd64,  platform_sln: x64,  platform_name: x64,  build_config: Release    }
          - { build: msbuild_cl_x64_minsize,  os: windows-2019,  compiler: msbuild_cl, arch: amd64,  platform_sln: x64,  platform_name: x64,  build_config: MinSizeRel }
    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4
          
      - name: setup submodules and build dir
        run: |
          git submodule init
          git submodule update
          mkdir build

      - name: Set MSVC environment
        uses: deep-soft/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.platform_sln }}

# set(CERTMGR "certmgr.exe")
      - name: patch CMakeLists.txt (certmgr.exe)
        if: ${{ inputs.patch_CMakeLists_txt }}
        continue-on-error: true
        shell: bash
        run: |
          old_cmd=$(grep "set(CERTMGR \"certmgr.exe\")" CMakeLists.txt);
          echo "old_cmd=$old_cmd";
          sed -ibak "s!set(CERTMGR \"certmgr.exe\")!set(CERTMGR \"echo Y | certmgr.exe\")!" CMakeLists.txt;
          new_cmd=$(grep "certmgr.exe" CMakeLists.txt);
          echo "new_cmd=$new_cmd";
          # change .exe to .eye !!!
          echo search for .exe in CMakeLists.txt
          grep ".exe\"" CMakeLists.txt;
          echo "Done exe";
          
          #sed -ibak "s!.exe\"!.eye\"!" CMakeLists.txt;
          sed -ibak "s!certmgr.exe!certmgr.eye!" CMakeLists.txt;
          
          echo search for .eye in CMakeLists.txt
          grep ".eye\"" CMakeLists.txt;
          echo "Done eye";

#      - name: cmake
#        working-directory: ./build
#        run: |
#          cmake -DCMAKE_GENERATOR_PLATFORM=x64 ..
#
#      - name: Build (msbuild)
#        working-directory: ./build
#        run: |
#          msbuild -m /property:Configuration=${{ matrix.build_config }} /property:Platform=${{ matrix.platform_sln }} usbsnoop.sln

      - name: cmake Configure
        working-directory: ./build
        run: |
          cmake "-DCMAKE_GENERATOR_PLATFORM=x64" "-DCMAKE_BUILD_TYPE=${{ matrix.build_config }}" ..

# zip release - phase 1 -  begin
      - name: Create Zip Archive Release - ALL
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2.2
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ env.PROG_VER }}-${{ matrix.platform_sln }}-${{ matrix.build_config }}-ALL_1.zip'
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: 'ZIP_ARCHIVE_ALL_1'
        # archive name is ${{ env.ZIP_ARCHIVE_ALL }}

      - name: Publish - ALL
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          tag_name: ${{ env.TAG_NAME }}-ALL
          files: |
            ${{ env.ZIP_ARCHIVE_ALL_1 }}
# zip release - phase 1 -  end

      - name: cmake Build
        continue-on-error: true
        working-directory: ./build
        timeout-minutes: 1
        shell: bash
        run: |
          set -x;
          cmake --build . --config ${{ matrix.build_config }} -v;

      - name: Create Zip Archive Release
        if: ${{ matrix.build_config  == 'Release' || matrix.build_config  == 'MinSizeRel' }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ matrix.platform_sln }}-${{ env.PROG_VER }}-${{ matrix.build_config }}.zip'
          directory: 'build/${{ matrix.platform_sln }}/${{ matrix.build_config }}'
          exclusions: '*.map *.pdb'
          recursive_exclusions: '*.map *.pdb'
          env_variable: 'ZIP_ARCHIVE_RELEASE'
          path: '.'

      - name: Publish
        if: ${{ matrix.build_config  == 'Release' || matrix.build_config  == 'MinSizeRel' }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ZIP_ARCHIVE_RELEASE }}

# zip release begin
      - name: Create Zip Archive Release - ALL
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2.2
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ env.PROG_VER }}-${{ matrix.platform_sln }}-${{ matrix.build_config }}-ALL.zip'
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: 'ZIP_ARCHIVE_ALL'
        # archive name is ${{ env.ZIP_ARCHIVE_ALL }}

      - name: Publish - ALL
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          tag_name: ${{ env.TAG_NAME }}-ALL
          files: |
            ${{ env.ZIP_ARCHIVE_ALL }}
# zip release end
